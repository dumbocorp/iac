name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  dispatch:
    runs-on: ubuntu-latest
    outputs:
      queue: ${{ steps.changes.outputs.list }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: json
          filters: |
            changes:
              - 'ecommerce-platform/**'
              - 'microblogging-server/**'
      - name: Output execution plan
        id: changes
        run: echo "list=$(cat queue.json)" > $GITHUB_OUTPUT
        
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    needs: dispatch
    if: ${{ needs.dispatch.outputs.queue != '[]' && needs.dispatch.outputs.queue != '' }}
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        include: ${{ fromJSON(needs.dispatch.outputs.queue) }}
    env:
      TF_IN_AUTOMATION: "true"
      TF_INPUT: "false"
      working-directory: workspaces/${{ matrix.workspace }}
      PROJECT_ID: boost-malware-poc
      GCLOUD_VERSION: 410.0.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
      - uses: google-github-actions/auth@v1
        name: Authenticate to Google Cloud
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - uses: google-github-actions/setup-gcloud@v1.0.1
        name: Setup gcloud Tool
        with:
          version: ${{ env.GCLOUD_VERSION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.working-directory }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.working-directory }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.working-directory }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: ${{ env.working-directory }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ env.working-directory }}
